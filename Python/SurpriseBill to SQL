#Load Python Packages
import pandas as pd
import datetime 
import os
import pyodbc
import codecs


#Read in Specs for file location and Data Dictionary Details 
dd_map = pd.read_excel('//PATH TO  /Data Dictionaries.xlsx',
                           sheet_name = 'Empire')   

#Only read in selected columns 
use_cols = ['32BJ-CLM-ID','32BJ-LN-ID','32BJ-CLM-ADJ-NO','32BJ-SERV-UNT-NO','SURPRISE_BILLING','QPA_AMOUNT']
dd_map = dd_map[dd_map['Empire Field Name'].isin(use_cols)].reset_index(drop=True)
start_pos = dd_map['Start Position']
end_pos = dd_map['End Position']
positions = []
fields = []

for i in range(len(dd_map)):
    field = dd_map['Empire Field Name'][i].strip()
    pos = [start_pos[i]-1, end_pos[i]]
    positions.append(pos)
    fields.append(field)

daily_file_dir = '//PATH /Daily Claims Files/WGS/'
files = [daily_file_dir + x for x in os.listdir(daily_file_dir) if datetime.datetime.strptime(x[55:63], '%Y%m%d') >= datetime.datetime(2022,5,27) and '.out' in x]
monthly_file_dir = '// PATH /Monthly Claims Files/WGS/'
files.extend([monthly_file_dir + x for x in os.listdir(monthly_file_dir) if datetime.datetime.strptime(x[73:81], '%Y%m%d') >= datetime.datetime(2022,5,27) and '.out' in x])

df_combined = pd.DataFrame()


for file in files:
    with codecs.open(file, 'rb', encoding='utf-8', errors='ignore') as f_in:
        df = pd.read_fwf(f_in, names = fields, colspecs = positions).query('SURPRISE_BILLING == 1')
        df['File'] = file.split("/")[-1]
        df_combined = pd.concat([df_combined,df], ignore_index=True)

        
df_out = df_combined.groupby(use_cols).agg('; '.join).reset_index()



#Connect to DB via SQL Server
conn = pyodbc.connect('Driver={SQL Server};'   
                      'Server=********;'   ##SERVER NAME
                      'Database=*****;'       ##DATABASE
                      'Trusted_Connection=yes;')
cursor = conn.cursor()

conn.autocommit = True

#Check for database connection
if (conn == False):
    print("Connection  Error")
else: 
    print("Connection  Successful")
    
#additional libraries
import sqlalchemy
import os
from sqlalchemy.orm import sessionmaker 
    
#Connect to SQL Server
con = sqlalchemy.create_engine('mssql://SERVER/DATABASE?trusted_connection=yes&driver=ODBC+Driver+17+for+SQL+Server',
                               fast_executemany=True)    

Session = sessionmaker(bind=con)
session = Session()    

df = pd.DataFrame(df_out) 


col = ['32BJ-CLM-ID', 'QPA_AMOUNT', '32BJ-SERV-UNT-NO', '32BJ-CLM-ADJ-NO', '32BJ-LN-ID']
df['SB_ID'] = df[col].apply(lambda row: '_'.join(row.values.astype(str)), axis=1)


## Insert data into SQL Server
print('Loading new Surprise Bill numbers to SQL table')  

# code to upload dataframe to SQL Server
conn.commit()
df.to_sql( 'TABLE_NAME', con, schema='SCHEMA_NAME', index=True, chunksize=100000, if_exists='append')


print("New data loaded into Surprisebill_Raw")
#-----------------------------------


#query to truncate tables and change data from raw to archive
print('Changing and loading data into Surprisebill Table ')

#Run STORED PROCEDURE
print("Running STORED PROCEDURE")
itemISthere = conn.cursor()
itemISthere.execute("DATABASE.SCEMA.SP_NAME")
print("SP run successful")
        
print('Update complete')
