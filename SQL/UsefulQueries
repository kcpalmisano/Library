----Select rows 1 - 1000000

select * from (
	select *, ROW_NUMBER() OVER(ORDER BY CLAIMNR) AS ROWNUM FROM Empire.ClaimsClean
			) as b
where b.ROWNUM BETWEEN 1 and 1000000


----View / Table Ownership 

Select * from sys.tables --sys.views
Where name LIKE '%flat_test%'
--principle_id = 34


----PULL TABLES SIZES
SELECT 
    t.NAME AS TableName,
    s.Name AS SchemaName,
    p.rows,
CAST((ROUND(((SUM(a.used_pages) * 8) / 1024.00), 2)*.001) AS NUMERIC(36, 2)) as UsedGBs,
    SUM(a.total_pages) * 8 AS TotalSpaceKB,    ---KB calc
    CAST(ROUND(((SUM(a.total_pages) * 8) / 1024.00), 2) AS NUMERIC(36, 2)) AS TotalSpaceMB,    ---MB calc
    SUM(a.used_pages) * 8 AS UsedSpaceKB,			---KB used 
    CAST(ROUND(((SUM(a.used_pages) * 8) / 1024.00), 2) AS NUMERIC(36, 2)) AS UsedSpaceMB,    ---MB used
    (SUM(a.total_pages) - SUM(a.used_pages)) * 8 AS UnusedSpaceKB,    ---unused KB
    CAST(ROUND(((SUM(a.total_pages) - SUM(a.used_pages)) * 8) / 1024.00, 2) AS NUMERIC(36, 2)) AS UnusedSpaceMB   ---unsused MB
FROM 
    sys.tables t
INNER JOIN      
    sys.indexes i ON t.OBJECT_ID = i.object_id
INNER JOIN 
    sys.partitions p ON i.object_id = p.OBJECT_ID AND i.index_id = p.index_id
INNER JOIN 
    sys.allocation_units a ON p.partition_id = a.container_id
LEFT OUTER JOIN 
    sys.schemas s ON t.schema_id = s.schema_id
WHERE 
    t.NAME NOT LIKE 'dt%' 
    AND t.is_ms_shipped = 0
    AND i.OBJECT_ID > 255 
	--AND t.NAME LIKE '%#%'	    ----id by table name
	--AND s.NAME LIKE '%Temp%'  ----id by schema name
GROUP BY 
    t.Name, s.Name, p.Rows
ORDER BY 
     TotalSpaceKB desc,   ---order by largest 
 s.Name, t.Name   --- alphabetical 


----Dupe check (for claimnr)

select claimnr, count(claimnr)
from #temp1abc 
group by claimnr 
having count(claimnr) >1


----Delete dupes

WITH DuplicateRows AS (
  SELECT 
    ClaimNr, ClaimAdjustmentNr, ClaimLineNr,
    ROW_NUMBER() OVER (
      PARTITION BY ClaimNr, ClaimAdjustmentNr, ClaimLineNr
      ORDER BY (SELECT NULL)
    ) AS RowNumber
  FROM ClaimsFlat_test
  WHERE ClaimNr IN (
    SELECT ClaimNr
    FROM ClaimsFlat_test
    GROUP BY ClaimNr, ClaimAdjustmentNr, ClaimLineNr
    HAVING COUNT(*) > 1
  )
)
DELETE FROM DuplicateRows
WHERE RowNumber > 1;

----Get VIEW Information
select distinct schema_name(v.schema_id) as schema_name,
  v.name as view_name,
  schema_name(o.schema_id) as referenced_schema_name,
  o.name as referenced_entity_name,
  o.type_desc as entity_type
 from sys.views v
	 join sys.sql_expression_dependencies d 
		on d.referencing_id = v.object_id 
		and d.referenced_id is not null 
	join sys.objects o 
		on o.object_id = d.referenced_id
  order by schema_name, view_name;


----Find a COLUMN
SELECT c.name AS 'ColumnName'
      ,t.name AS 'TableName'
	  ,s.name AS 'SchemaName'
FROM sys.columns c
JOIN sys.tables  t   
ON c.object_id = t.object_id
JOIN sys.schemas s 
ON s.schema_id = t.schema_id
WHERE c.name LIKE '%DiagnosisRelatedGroupAssigned%'
ORDER BY TableName, ColumnName, SchemaName;


---Question 1: Find Duplicates
--Table: Numbers

num
1
2
2
3
4
4
4
--Task: Write an SQL query to find all numbers that appear more than once in the table, along with their counts.

SELECT num, COUNT(*) AS count
FROM Numbers
GROUP BY num
HAVING COUNT(*) > 1;



---Question 2: Missing Numbers
--Table: Numbers


num
1
2
4
5
---Task: Write an SQL query to find the missing numbers in the sequence from the minimum value to the maximum value of the column.

---POSTGRESQL
WITH NumberRange AS (
    SELECT generate_series(MIN(num), MAX(num)) AS num
    FROM Numbers
)
SELECT num
FROM NumberRange
WHERE num NOT IN (SELECT num FROM Numbers);

---recursive CTE
WITH RECURSIVE NumberRange AS (
    SELECT 1 AS num
    UNION ALL
    SELECT num + 1
    FROM NumberRange
    WHERE num < 10
)
SELECT num FROM NumberRange;



--Question 3: Median of Numbers

num
3
1
4
1
5
9
--Task: Write an SQL query to calculate the median value of the column.


SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY num) AS median
FROM Numbers;

---SQL server/ oracle
SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY num) 
       OVER () AS median  --requires and OVER () 
FROM Numbers;

---alt for no support 
WITH NumberedRows AS (
    SELECT num, ROW_NUMBER() OVER (ORDER BY num) AS row_num,
           COUNT(*) OVER () AS total_count
    FROM Numbers
)
SELECT AVG(num) AS median
FROM NumberedRows
WHERE row_num IN (FLOOR((total_count + 1) / 2.0), CEIL((total_count + 1) / 2.0));

--MS SQL Server
WITH OrderedNumbers AS (
    SELECT 
        num,
        ROW_NUMBER() OVER (ORDER BY num) AS row_num,
        COUNT(*) OVER () AS total_count
    FROM Numbers
)
SELECT 
    CASE 
        WHEN total_count % 2 = 1 THEN -- Odd count, take the middle value
            CAST(MAX(CASE WHEN row_num = (total_count + 1) / 2 THEN num END) AS FLOAT)
        ELSE -- Even count, take the average of the two middle values
            CAST(AVG(CASE WHEN row_num IN (total_count / 2, total_count / 2 + 1) THEN num END) AS FLOAT)
    END AS median
FROM OrderedNumbers;



---Question 4: Find Consecutive Numbers

num
1
2
3
5
6
8
--Task: Write an SQL query to find all sets of consecutive numbers.

SELECT DISTINCT a.num AS start_num, b.num AS next_num
FROM Numbers a
JOIN Numbers b
ON a.num + 1 = b.num
ORDER BY a.num;

---Question 5: Rank the Numbers

num
20
10
30
40
50
--Task: Write an SQL query to rank the numbers in ascending order.

SELECT num, RANK() OVER (ORDER BY num ASC) AS Rank
FROM Numbers
ORDER BY Rank ASC;


--Question 6: Find Single Occurrence Numbers

num
1
2
2
3
3
3
4
--Task: Write an SQL query to find all numbers that appear only once in the table.

SELECT num
FROM Numbers
GROUP BY num
HAVING COUNT(*) = 1;


--Question 7: Sum of Even Numbers

num
1
2
3
4
5
--Task: Write an SQL query to calculate the sum of all even numbers.

SELECT SUM(num)
FROM Numbers
WHERE num % 2 = 0;


